name: on-premise-cicd
on:
  workflow_dispatch:
    inputs:
      tags: # ex) v1.0.0 을 매개변수로 받음
        description: 'Set Tags Name'
        required: true
        default: master

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release: ${{steps.set-version.outputs.VERSION_NAME}}
    steps:
      - id: set-version #변수명 사용위해 name 말고 id 사용 / set-version.outputs.VERSION_NAME
        run: |
          echo "VERSION_NAME=$(echo "${{github.event.input.tags}}" | sed"s/\./\-/g")" >> $GITHUB_OUTPUT
      #OUTPUT으로 등록

      - name : Check Version Name
        run: |
          echo "Check Version -> ${{steps.set-version.outputs.VERSION_NAME}}"

      - name: Debug Input Tags
        run: |
          echo "Input Tags: ${{ github.event.inputs.tags }}"

      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.inputs.tags }}' #위에서 받은 tag 파라미터 사용 (실제로 해당 tag명의 tag가 존재해야 checkout가능)

      - name: Grant execute permission for gradlew #gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Setup JDK 21 #JDK설치
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Gradlew
        run: ./gradlew clean test bootJar #clean, test, bootJar 실행

      - name: Add version #bootJar로 build/libs에 생성된 jar파일 이름 변경
        run: |
          mv build/libs/cicd-study-0.0.1-SNAPSHOT.jar build/libs/cicd-study-${{ steps.set-version.outputs.VERSION_NAME }}.jar

      - name: Upload Artifact #Build한 결과물로 생성된 파일
        uses: actions/upload-artifact@v4
        with:
          name: cicd-study-application #cicd-study-application.zip으로 생성됨
          path: build/libs/cicd-study-${{ steps.set-version.outputs.VERSION_NAME }}.jar #해당경로의 파일을 사용해서

  deploy:
    runs-on: ubuntu-latest
    need:
      - build

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: cicd-study-application # cicd-study-application.zip
          path: build/libs

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/cicd-study-${{ needs.build.outputs.release }}.jar ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER_NAME }}/cicd-study-${{ needs.build.outputs.release }}.jar
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_USER_NAME }}/cicd-study-${{ needs.build.outputs.release }}.jar > app.log 2>&1 &"
          rm -f private_key.pem

